QFileDialog::AcceptMode
/*
  1. QFileDialog::AcceptOpen
  2. QFileDialog::AcceptSave
*/


QMessageBox::information(this,QGuiApplication::applicationDisplayName,tr("Can not load %1: %2).arg(QDir::toNativeSeparater(fileName),QImageReader_object.errorString()));
/*
  1. QMessageBox::information() return a messageBox with only an OK button
  2. QDir::toNativeSeparater(pathName) return a QString object contains the path with native separater
  3. QImagereader::errorStrrring() return a QString object contains the error message,usually paired with QImage::isNull()
*/


QAction::setEnbaled(true);
/*
  if an action is not enabled, it can be seen by the user but can't be checkedor clicked
*/


QLineEdit::setPlaceholderText(QString );
/*
  placeholder text is shown when no text is enter in the lineedit in grey
*/


QLineEdit::setReadOnly(bool );
/*
  readonly lineedit can't be edited
*/


QLineEdit::setAnlignment(Qt::Alingnment );
/*
  Qt:: Alignment : 
  1. Qt::AlignLeft
  2. Qt::AlignCenter
  3. Qt::AlignRight
*/


QImage::load(fileName);
QImage::save(fileName,fileFormat);


Qt::Button QMouseEvent::button();
QSize QMouseEvent::pos();


QPaintEvent::rect()
/*
  return the region needed to be painted, it depends on where the painter is
*/


QPainter::drawImage(QRect target, QImage image, QRect source);
/*
  draw the source rect on the image to the target rect on the paint device

  to avoid bugs, alway copy the whole image on the origin place instead of drawing on the painter device directly
*/


QMenu::addAction(QAction* );
QMenu::addMenu(QMenu* );
QMenu::addSeparator();
