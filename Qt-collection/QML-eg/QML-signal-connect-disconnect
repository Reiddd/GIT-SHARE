/*
  [ on<eventName> ], [ on<propertyName>Changed ] are two types of handles.
  
  [ on<eventName> ] is triggered when specified event happens.
  
  [ on<propertyName>Changed ] is triggered when specified property is changed.
  only QML basic types provide property change signal.
---------
  connections connect parent to [connections.target]
  
  connections{target: chosen_object; handle_name: {func_body}}
---------
  [signal.connect([signal | function])]
  
  [signal.disconnect([signal | function])]
*/

import QtQuick 2.0

Rectangle{
    id: rect
    width: 100;height: 100
    
    MouseArea{
        anchors.fill: parent
        onPressedChanged:{  //pressed is a property, onPressedChangedis a handle
            console.log("Mouse area is pressed?",pressed);
        }
    }
}

//-------parent.connections

Rectangle{
    id: rect2
    width: 100;height: 100
    
    MouseArea{
        id: mouseArea
        anchors.fill: parent
    }
    
    connections{
        target: mouseArea
        onClicked: {
            rect.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1);
        }
    }
}

//-------signal.connect([signal | function])

Rectangle{
    id: relay
    
    signal messageReceived(string person, string notice)
    
    Component.onCompleted:{
        relay.messageReceived.connect(sendToPost)
        relay.messageReceived.connect(sendToTelegraph)
        relay.messageReceived.connect(sendToEmail)
        relay.messageReceived.connect("Tom", "Happy Birthday")
        
        relay.messageReceived.disconnect("Tom","Happy Birthday")
    }
    
    function sendToPost(person, notice){
        console.log("Sending to post: " + person + "," + notice)
    }
    
    function sendToTelegraph(person, notice){
        console.log("Sending to telegraph: " + person + "," + notice)
    }
    
    function sendToEmail(person, notice){
        console.log("Sending to email: " + person + "," + notice)
    }
}
